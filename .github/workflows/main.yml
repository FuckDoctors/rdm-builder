# http://docs.redisdesktop.com/en/latest/install/
# https://github.com/actions/virtual-environments/blob/master/images/win/Windows2019-Readme.md

# This is a basic workflow to help you get started with Actions
name: CI for redis desktop manager

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  push:
    branches: [ master ]
    paths-ignore: 
      - 'README.md'
      - 'LICENSE'
  pull_request:
    branches: [ master ]
    paths-ignore: 
      - 'README.md'
      - 'LICENSE'

env:
  RDM_REF: 2021.8.0-ssh
  VERSION: 2021.8.0
  PY_LIB_VERSION: 38
  PYTHON_EMBEDDED_VERSION: 3.8.10

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  create_release:
    runs-on: windows-latest
    # https://docs.github.com/en/actions/reference/workflow-syntax-for-github-actions#jobsjobs_idoutputs
    # Map a step output to a job output
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      # - name: checkout
      #   uses: actions/checkout@v2
      #   with:
      #     fetch-depth: 0

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          tag_name: ${{ env.RDM_REF }}
          release_name: v${{ env.RDM_REF }}
          body: |
            ${{ env.RDM_REF }}
          draft: false
          prerelease: false

  build_on_osx:
    needs: create_release
    runs-on: macos-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
    # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
    - uses: actions/checkout@v2
      with:
        repository: uglide/RedisDesktopManager
        path: rdm
        submodules: 'recursive'
        ref: ${{ env.RDM_REF }}

    - name: build lz4
      run: |
        cd rdm/3rdparty/lz4/build/cmake
        cmake -DLZ4_BUNDLED_MODE=ON -DBUILD_SHARED_LIBS=ON
        make -s -j 8

    # install QT   
    - name: install QT
      uses: jurplel/install-qt-action@v2
      with: 
        version: '5.15.1'
        modules: 'qtcharts'
    
    - name: copy info.plist
      run: |
        cd rdm
        cd ./src && cp ./resources/Info.plist.sample ./resources/Info.plist
    
#     - name: setup python
#       run: |
#         brew unlink python@3.9
#         brew install python@3.7
#         brew link --overwrite python@3.7
    
    # 使用私有库,egg-links时-t不能同时使用，--user解决权限问题
    # https://github.com/UnitedIncome/serverless-python-requirements/issues/240
    # https://github.com/pypa/pip/issues/4390
    # https://github.com/pypa/pip/issues/4139
    # https://github.com/pypa/pip/issues/562
    # sudo pip3 install --prefix . -r $GITHUB_WORKSPACE/rdm/src/py/requirements.txt
    # sudo pip3 install -t . -r $GITHUB_WORKSPACE/rdm/src/py/requirements.txt
    - name: pip install
      run: |
        cd rdm
        mkdir -p bin/osx/release && cd bin/osx/release
        cp -Rf $GITHUB_WORKSPACE/rdm/src/py .
        cd py
        echo six >> requirements.txt
        sudo pip3 install -t . -r requirements.txt
        sudo python3 -m compileall -b .
        sudo find . -name "*.py" | sudo xargs rm -rf
        sudo find . -name "__pycache__" | sudo xargs rm -rf
        sudo find . -name "*.dist-info" | sudo xargs rm -rf
        sudo find . -name "*.egg-info" | sudo xargs rm -rf

    - name: release translations
      run: |
        cd rdm/src
        lupdate rdm.pro
        lrelease -verbose rdm.pro

    # brew install tree && tree -a
    # 去掉initUpdater不然报Please download new version of Redis Desktop Manager，不能使用
    # sed -i '.back' 's/initUpdater();/\/\/initUpdater();/g' ./app/app.cpp
    # macdeployqt
    # https://doc.qt.io/qt-5/macos-deployment.html
    # Qt Translations are not being copied
    # https://github.com/probonopd/linuxdeployqt/issues/115
    - name: build
      id: build
      run: |
        python ./rdm/build/utils/set_version.py ${{ env.VERSION }} > ./rdm/src/version.h
        cd rdm/src
        qmake rdm.pro CONFIG-=debug "VERSION=${{ env.VERSION }}"
        make -s -j 8

    - name: copy translations
      run: |
        cd rdm/src
        mkdir ../bin/osx/release/RDM.app/Contents/translations
        cp -f ./resources/translations/*.qm ../bin/osx/release/RDM.app/Contents/translations

    - name: package
      id: package
      run: |
        cd rdm/bin/osx/release
        zip -q -r release.zip .
        cp -Rf py ./RDM.app/Contents/Resources/
        otool -L ./RDM.app/Contents/MacOS/RDM
        macdeployqt ./RDM.app -qmldir=../../../src/qml -always-overwrite -dmg

    - name: Upload Release Asset
      id: upload-release-asset 
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create_release.outputs.upload_url }}
        asset_path: rdm/bin/osx/release/RDM.dmg
        asset_name: RDM.dmg
        asset_content_type: application/dmg
